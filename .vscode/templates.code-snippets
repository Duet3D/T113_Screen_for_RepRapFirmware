{
	// Place your FlyScreen_7inches workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"i18n_string": {
		"scope": "xml",
		"prefix": "i18n_string",
		"body": [
			"<string name=\"${1:label}\">${2:text}</string>$0"
		],
	},
	"include_dbg": {
		"scope": "cpp",
		"prefix": "include_dbg",
		"body": [
			"#include \"DebugLevels.h\"",
			"#define DEBUG_LEVEL DEBUG_LEVEL_${1:DBG}",
			"#include \"Debug.h\"",
			"",
			"$0"
		],
	},
	"header": {
		"scope": "cpp",
		"prefix": "header",
		"body": [
			" /*",
			" * ${TM_FILENAME}",
			" *",
			" *  Created on: ${CURRENT_DATE} ${CURRENT_MONTH_NAME} ${CURRENT_YEAR}",
			" *      Author: ${1}",
			" */",
			"",
			"#ifndef JNI_${2}_H_",
			"#define JNI_${2}_H_",
			"",
			"namespace ${3}",
			"{",
			"	${0}",
			"} // namespace ${3}",
			"",
			"#endif /* JNI_${2}_H_ */",
		]
	},
	"source": {
		"scope": "cpp",
		"prefix": "source",
		"body": [
			" /*",
			" * ${TM_FILENAME}",
			" *",
			" *  Created on: ${CURRENT_DATE} ${CURRENT_MONTH_NAME} ${CURRENT_YEAR}",
			" *      Author: ${1}",
			" */",
			"",
			"#include \"DebugLevels.h\"",
			"#define DEBUG_LEVEL DEBUG_LEVEL_${2:DBG}",
			"#include \"Debug.h\"",
			"",
			"#include \"${TM_FILENAME_BASE}.h\"",
			"",
			"namespace ${3}",
			"{",
			"	${0}",
			"} // namespace ${3}",
			"",
		]
	},
	"separator": {
		"scope": "cpp",
		"prefix": "separator",
		"body": [
			"// =====================================================================================================================",
			"// $1",
			"// =====================================================================================================================$0",
		]
	},
}